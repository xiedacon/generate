#!/usr/bin/env node

'use strict'

const args = require('args')
const { resolve } = require('path')
const fs = require('fs')

const configPath = resolve(__dirname, '../config.json')
const config = require(configPath)
const { encoding } = config
const licenses = fs.readdirSync(resolve(__dirname, '../license'))
const templates = fs.readdirSync(resolve(__dirname, '../templates'))
const pluginsPath = resolve(__dirname, '../plugins')
const { render } = require(config.engine)

args
  .option('user', 'User name', config.user)
  .option('project', 'Project name', config.project)
  .option('template', `Template to generate project: ${templates.join(', ')}`, 'github')
  .option('license', `License to generate project: ${licenses.join(', ')}`, config.license, license => license.toUpperCase())
  .option('encoding', 'Encoding to generate project', config.encoding)
  .option('root', 'Root dir to generate project')
  .option('config', 'Config to generate project', `${configPath}`, configPath => resolve(process.cwd(), configPath))

let flags = args.parse(process.argv)
let userConfig = flags.config

if (userConfig && userConfig !== configPath) {
  userConfig = JSON.parse(fs.readFileSync(userConfig, { encoding }))
  Object.keys(userConfig).forEach((key) => {
    userConfig[key.charAt(0)] = userConfig[key]
  })
  flags = Object.assign(flags, userConfig)
}

if (check(flags)) process.exit(1)

process.env.PWD = flags.root
process.cwd = () => flags.root
flags.year = new Date().getFullYear()
flags.render = render
flags.plugins = config.plugins.map((plugin) => {
  return {
    name: plugin,
    do: require(resolve(pluginsPath, plugin))
  }
})

/*
  {
    user: 'nobody',
    project: 'noproject',
    template: 'github',
    license: 'MIT',
    encoding: 'utf8',
    config: '/path/to/config',
    root: '/path/to/root',
    year: 2017,
    render: Function
    plugins: [],
  }
 */

require('../lib/generate.js')(flags)

function check (flags) {
  if (licenses.indexOf(flags.license) < 0) {
    console.error(`Unsupport license: ${flags.license}\n`)
    console.info(`You can choose these:\n  ${licenses.join(', ')}`)
    return true
  }
  if (templates.indexOf(flags.template) < 0) {
    console.error(`Unsupport template: ${flags.template}\n`)
    console.info(`You can choose these:\n  ${templates.join(', ')}`)
    return true
  }

  flags.r = flags.root = resolve(process.cwd(), flags.root || '')

  try {
    fs.accessSync(flags.root, fs.constants.W_OK)
  } catch (err) {
    if (err.toString().indexOf('no such file or directory') < 0) {
      throw err
    } else {
      fs.mkdirSync(flags.root)
    }
  }

  return false
}
