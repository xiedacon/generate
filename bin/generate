#!/usr/bin/env node

'use strict'

const fs = require('fs')
const os = require('os')
const { resolve, parse } = require('path')
const inquirer = require('inquirer')

const config = require('../config')
const userInfo = os.userInfo()

const templatePath = resolve(`${__dirname}/../templates`)
const templates = fs.readdirSync(templatePath)
const pluginPath = resolve(`${__dirname}/../plugins`)
const plugins = fs.readdirSync(pluginPath).map(file => parse(file).name)
const licensePath = resolve(`${__dirname}/../license`)
const licenses = fs.readdirSync(licensePath)

if (templates.length === 0) throw new Error(`No template find in ${templatePath}`)
if (plugins.length === 0) throw new Error(`No plugin find in ${pluginPath}`)
if (licenses.length === 0) throw new Error(`No license find in ${licensePath}`)

inquirer.prompt([
  {
    type: 'input',
    name: 'root',
    message: 'Project root:',
    default: process.argv[2] || '.',
    validate (root) {
      try {
        fs.mkdirSync(root, { recursive: true })
        return true
      } catch (err) {
        if (err.toString().indexOf('file already exists') < 0) {
          throw err
        } else {
          const stats = fs.statSync(root)

          if (!(stats.mode & fs.constants.S_IFDIR)) return `'${root}' should be a dir`
          else if (
            (userInfo.uid === stats.uid && (stats.mode & fs.constants.S_IWUSR)) ||
            (userInfo.gid === stats.gid && (stats.mode & fs.constants.S_IWGRP)) ||
            (stats.mode & fs.constants.S_IWOTH)
          ) return true
          else return `'${root}' should be writable`
        }
      }
    }
  },
  {
    type: 'input',
    name: 'user',
    message: 'Project owner:',
    default: config.user || userInfo.username
  },
  {
    type: 'input',
    name: 'project',
    message: 'Project name:',
    default (result) {
      return result.root.split('/').pop()
    },
    validate (val) {
      return Boolean(val) || 'Project name is required.'
    }
  },
  {
    type: 'list',
    name: 'template',
    message: 'Project template:',
    choices: templates,
    default: config.template || templates[0]
  },
  {
    type: 'checkbox',
    name: 'plugins',
    message: 'Project Plugins:',
    choices: plugins,
    default: config.plugins
  },
  {
    type: 'list',
    name: 'license',
    message: 'Project license:',
    choices: licenses,
    default: config.license || licenses[0],
    when (result) {
      return result.plugins.indexOf('license') >= 0
    }
  }
]).then((result) => {
  process.env.PWD = result.root
  process.cwd = () => result.root
  result.render = require(config.engine).render
  result.plugins = result.plugins.map((plugin) => ({
    name: plugin,
    do: require(resolve(pluginPath, plugin))
  }))

  require('../lib/generate.js')(result)
}).catch((err) => {
  console.log(err)
})
